
#Описание переменных для секретов и рестртов
x-env_file: &env_file
  env_file:
    - .env
x-restart: &restart
  restart: always #no, on-failure , always(default), unless-stopped

#Создание bridge-сети с названием "backend" 172.20.0.0/24
networks:
  backend:
    driver: bridge
    ipam:
     config:
       - subnet: 172.20.0.0/24

#Созадние сервиса БД
services:
  db:
    container_name: db
    image: mysql:8
    networks:
      backend:
        ipv4_address: 172.20.0.10
    <<: [*env_file, *restart]
    environment:
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}


#создание сервиса python
  web:
    depends_on: ["db"]
    container_name: web
    build:
      dockerfile:  Dockerfile.python
    networks:
      backend:
        ipv4_address: 172.20.0.5
    <<: [*env_file, *restart]
    environment:
      - DB_HOST=db
      - DB_USER=${MYSQL_USER}
      - DB_PASSWORD=${MYSQL_PASSWORD}
      - DB_NAME=${MYSQL_DATABASE}

        
#Создание сервиса перенаправления в закрытую сеть
  nginx_ingress:
    image: nginx:latest
    container_name: nginx_ingress
    network_mode: host
    ports:
    - '127.0.0.1:8090:8090'
    <<: [*env_file, *restart]
    volumes:
    - ./nginx/ingress/default.conf:/etc/nginx/conf.d/default.conf
    - ./nginx/ingress/nginx.conf:/etc/nginx/nginx.conf

    

  haproxy_reverse:
    container_name: haproxy_reverse
    image: haproxy
    networks:
      backend:
        ipv4_address: 172.20.0.20
    ports:
    - '127.0.0.1:8080:8080'
    <<: [*env_file, *restart]
    volumes:
    - ./haproxy/reverse/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg
  

